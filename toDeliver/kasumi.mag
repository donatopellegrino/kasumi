SeqXor:=function(A, B)
    return [BitwiseXor(A[i], B[i]):i in [1..#A]];
end function;
SeqAnd:=function(A, B)
    return [BitwiseAnd(A[i], B[i]):i in [1..#A]];
end function;
SeqOr:=function(A, B)
    return [BitwiseOr(A[i], B[i]):i in [1..#A]];
end function;

BinTable := [
                [0,0,0,0],
                [0,0,0,1],
                [0,0,1,0],
                [0,0,1,1],
                [0,1,0,0],
                [0,1,0,1],
                [0,1,1,0],
                [0,1,1,1],
                [1,0,0,0],
                [1,0,0,1],
                [1,0,1,0],
                [1,0,1,1],
                [1,1,0,0],
                [1,1,0,1],
                [1,1,1,0],
                [1,1,1,1]
            ];
HexTable := ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];
HexToBin:=function(S)
    return &cat [BinTable[Position(HexTable,S[i])] : i in [1..#S]];
end function;
BinToHex := function(S)
    return &cat [HexTable[Position(BinTable,[S[i*4+1], S[i*4+2], S[i*4+3], S[i*4+4]])] : i in [0..#S/4-1]];
end function;
BinToNat := function(N)
    return Seqint(Reverse(N),2);
end function;
NatToBin := function(N,s)
    a := Reverse(Intseq(N,2));
    return [0 : i in [1..s-#a]] cat a;
end function;

KeySchedule:=function(Key)
    Key := HexToBin(Key);
    C   := HexToBin("0123456789ABCDEFFEDCBA9876543210");

    K   := Partition(Key, 16);
    Kp  := Partition(SeqXor(Key,C), 16);

    KL  := [[],[]];
    KO  := [[],[],[]];
    KI  := [[],[],[]];
    
    for i in [1..8] do 
        KL[1,i] := Rotate(K[i],-1);
        KL[2,i] := Kp[(1+i)mod 8 +1];

        KO[1,i] := Rotate(K[(0+i)mod 8 +1],-5);
        KO[2,i] := Rotate(K[(4+i)mod 8 +1],-8);
        KO[3,i] := Rotate(K[(5+i)mod 8 +1],-13);
        
        KI[1,i] := Kp[(3+i)mod 8 +1];
        KI[2,i] := Kp[(2+i)mod 8 +1];
        KI[3,i] := Kp[(6+i)mod 8 +1];
    end for;
    return KL, KO, KI;
end function;

ZE := function(A)
    return [0,0] cat A;
end function;

TR := function(A)
    return [A[i] : i in [3..#A]];
end function;

S9:=function(N)
table:=[167,239,161,379,391,334,9,338,38,226,48,358,452,385,90,397,183,253,147,331,415,340,51,362,306,500,262,82,216,159,356,177,175,241,489,37,206,17,0,333,44,254,378,58,143,220,81,400,95,3,315,245,54,235,218,405,472,264,172,494,371,290,399,76,165,197,395,121,257,480,423,212,240,28,462,176,406,507,288,223,501,407,249,265,89,186,221,428,164,74,440,196,458,421,350,163,232,158,134,354,13,250,491,142,191,69,193,425,152,227,366,135,344,300,276,242,437,320,113,278,11,243,87,317,36,93,496,27,487,446,482,41,68,156,457,131,326,403,339,20,39,115,442,124,475,384,508,53,112,170,479,151,126,169,73,268,279,321,168,364,363,292,46,499,393,327,324,24,456,267,157,460,488,426,309,229,439,506,208,271,349,401,434,236,16,209,359,52,56,120,199,277,465,416,252,287,246,6,83,305,420,345,153,502,65,61,244,282,173,222,418,67,386,368,261,101,476,291,195,430,49,79,166,330,280,383,373,128,382,408,155,495,367,388,274,107,459,417,62,454,132,225,203,316,234,14,301,91,503,286,424,211,347,307,140,374,35,103,125,427,19,214,453,146,498,314,444,230,256,329,198,285,50,116,78,410,10,205,510,171,231,45,139,467,29,86,505,32,72,26,342,150,313,490,431,238,411,325,149,473,40,119,174,355,185,233,389,71,448,273,372,55,110,178,322,12,469,392,369,190,1,109,375,137,181,88,75,308,260,484,98,272,370,275,412,111,336,318,4,504,492,259,304,77,337,435,21,357,303,332,483,18,47,85,25,497,474,289,100,269,296,478,270,106,31,104,433,84,414,486,394,96,99,154,511,148,413,361,409,255,162,215,302,201,266,351,343,144,441,365,108,298,251,34,182,509,138,210,335,133,311,352,328,141,396,346,123,319,450,281,429,228,443,481,92,404,485,422,248,297,23,213,130,466,22,217,283,70,294,360,419,127,312,377,7,468,194,2,117,295,463,258,224,447,247,187,80,398,284,353,105,390,299,471,470,184,57,200,348,63,204,188,33,451,97,30,310,219,94,160,129,493,64,179,263,102,189,207,114,402,438,477,387,122,192,42,381,5,145,118,180,449,293,323,136,380,43,66,60,455,341,445,202,432,8,237,15,376,436,464,59,461];
return NatToBin(table[BinToNat(N)+1], #N);
end function;

S7:=function(N)
table:=[54,50,62,56,22,34,94,96,38,6,63,93,2,18,123,33,55,113,39,114,21,67,65,12,47,73,46,27,25,111,124,81,53,9,121,79,52,60,58,48,101,127,40,120,104,70,71,43,20,122,72,61,23,109,13,100,77,1,16,7,82,10,105,98,117,116,76,11,89,106,0,125,118,99,86,69,30,57,126,87,112,51,17,5,95,14,90,84,91,8,35,103,32,97,28,66,102,31,26,45,75,4,85,92,37,74,80,49,68,29,115,44,64,107,108,24,110,83,36,78,42,19,15,41,88,119,59,3];
return NatToBin(table[BinToNat(N)+1], #N);
end function;

FI := function(I, Ki)
    L  := [[I[i]:i in [1..9]], [], [], [], []];
    R  := [[I[i]:i in [10..16]], [], [], [], []];

    KI := [[Ki[i]:i in [1..7]], [Ki[i]:i in [8..16]]];
    
    L[2] := R[1];
    R[2] := SeqXor(S9(L[1]), ZE(R[1]));
    
    L[3] := SeqXor(R[2], KI[2]);
    R[3] := SeqXor(SeqXor(S7(L[2]), TR(R[2])), KI[1]);

    L[4] := R[3];
    R[4] := SeqXor(S9(L[3]), ZE(R[3]));

    L[5] := SeqXor(S7(L[4]), TR(R[4]));
    R[5] := R[4];

    return L[5] cat R[5];
end function;

FL:=function(Ibefore, KL)
    L  := [Ibefore[i]:i in [1..16]];
    R  := [Ibefore[i]:i in [17..32]];
    
    Rp := SeqXor(R, Rotate(SeqAnd(L, KL[1]), -1));
    Lp := SeqXor(L, Rotate(SeqOr(Rp, KL[2]), -1));
    
    return Lp cat Rp;
end function;

FO:=function(Ibefore, KO, KI)
    L  := [[Ibefore[i]:i in [1..16]], [], [], []];
    R  := [[Ibefore[i]:i in [17..32]], [], [], []];
    
    for i in [2..4] do
        R[i] := SeqXor(FI(SeqXor(L[i-1], KO[i-1]), KI[i-1]), R[i-1]);
        L[i] := R[i-1];
    end for;

    return L[4] cat R[4];
end function;

fi:=function(I, KL, KO, KI, i)
    if IsEven(i) then
        return FL(FO(I, [KO[1,i], KO[2,i], KO[3,i]], [KI[1,i], KI[2,i], KI[3,i]]), [KL[1,i], KL[2,i]]);
    else
        return FO(FL(I, [KL[1,i], KL[2,i]]), [KO[1,i], KO[2,i], KO[3,i]], [KI[1,i], KI[2,i], KI[3,i]]);
    end if;
end function;

Kasumi:=function(P,K)
    KL, KO, KI := KeySchedule(K);

    I := HexToBin(P);
    L := [[I[i]:i in [1..32]],[],[],[],[],[],[],[]];
    R := [[I[i]:i in [33..64]],[],[],[],[],[],[],[]];

    for i in [2..9] do
        R[i] := L[i-1];
        fiRet := fi(L[i-1], KL, KO, KI, i-1);
        L[i] := SeqXor(R[i-1],fiRet);
    end for;

    return BinToHex(L[9] cat R[9]);
end function;

KasumiDecryption:=function(C,K)
    C := HexToBin(C);
    L := [[],[],[],[],[],[],[],[C[i]:i in [1..32]]];
    R := [[],[],[],[],[],[],[],[C[i]:i in [33..64]]];

    KL,KO,KI:=KeySchedule(K);

    for i in [0..6] do
        L[7-i]:=R[8-i];
        fiRet := fi(L[7-i], KL, KO, KI, 8-i);
        R[7-i] := SeqXor(L[8-i],fiRet);
    end for;

    L[9]:=R[1];
    fiRet:= fi(L[9], KL, KO, KI,1);
    R[9] := SeqXor(L[1],fiRet);
 
    return BinToHex(L[9] cat R[9]);
end function;